// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  PlacingLit.Views.MapView = (function(_super) {
    __extends(MapView, _super);

    function MapView() {
      return MapView.__super__.constructor.apply(this, arguments);
    }

    MapView.prototype.infowindows = [];

    MapView.prototype.settings = {
      zoomLevel: {
        'wide': 4,
        'default': 10,
        'close': 14,
        'tight': 21,
        'increment': 1
      }
    };

    MapView.prototype.model = PlacingLit.Models.Location;

    MapView.prototype.mapOptions = {
      zoom: 4,
      mapTypeId: google.maps.MapTypeId.ROADMAP,
      mapTypeControlOptions: {
        style: google.maps.MapTypeControlStyle.DROPDOWN_MENU
      },
      maxZoom: 25,
      minZoom: 2,
      zoomControl: true,
      zoomControlOptions: {
        style: google.maps.ZoomControlStyle.DEFAULT,
        position: google.maps.ControlPosition.TOP_LEFT
      },
      panControlOptions: {
        position: google.maps.ControlPosition.TOP_LEFT
      }
    };

    MapView.prototype.googlemap = function(id) {
      if (this.gmap != null) {
        return this.gmap;
      }
      this.gmap = new google.maps.Map(document.getElementById(id), this.mapOptions);
      google.maps.event.addListener(this.gmap, 'click', (function(_this) {
        return function(event) {
          return _this.handleMapClick(event);
        };
      })(this));
      return this.gmap;
    };

    MapView.prototype.marker = function() {
      if (this.placeInfowindow != null) {
        this.placeInfowindow.close();
      }
      return new google.maps.Marker();
    };

    MapView.prototype.infowindow = function() {
      var iw;
      if (this.infowindows.length) {
        this.closeInfowindows();
      }
      iw = new google.maps.InfoWindow();
      this.infowindows.push(iw);
      return iw;
    };

    MapView.prototype.closeInfowindows = function() {
      var iw, _i, _len, _ref, _results;
      _ref = this.infowindows;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        iw = _ref[_i];
        _results.push(iw.close());
      }
      return _results;
    };

    MapView.prototype.mappoint = function(latitude, longitude) {
      return new google.maps.LatLng(latitude, longitude);
    };

    MapView.prototype.markerFromMapLocation = function(map, location) {
      var markerSettings;
      markerSettings = {
        position: location,
        map: map,
        animation: google.maps.Animation.DROP,
        draggable: true
      };
      return new google.maps.Marker(markerSettings);
    };

    MapView.prototype.updateInfoWindow = function(text, location, map) {
      var infowindow;
      this.map = map != null ? map : this.googlemap('hpmap');
      infowindow = this.infowindow();
      infowindow.setContent(text);
      infowindow.setPosition(location);
      return infowindow.open(map);
    };

    MapView.prototype.setUserPlaceFromLocation = function(location) {
      return this.userPlace = location;
    };

    MapView.prototype.showInfowindowFormAtLocation = function(map, marker, location) {
      this.closeInfowindows();
      this.userInfowindow = this.infowindow();
      this.userInfowindow.setContent(document.getElementById('iwcontainer').innerHTML);
      this.userInfowindow.setPosition(location);
      this.userInfowindow.open(map);
      if (!Modernizr.input.placeholder) {
        return google.maps.event.addListener(this.userInfowindow, 'domready', (function(_this) {
          return function() {};
        })(this), this.clearPlaceholders());
      }
    };

    MapView.prototype.clearPlaceholders = function() {
      $('#title').one('keypress', function() {
        return $('#title').val('');
      });
      $('#author').one('keypress', function() {
        return $('#author').val('');
      });
      $('#place_name').one('keypress', function() {
        return $('#place_name').val('');
      });
      $('#date').one('keypress', function() {
        return $('#date').val('');
      });
      $('#actors').one('keypress', function() {
        return $('#actors').val('');
      });
      $('#symbols').one('keypress', function() {
        return $('#symbols').val('');
      });
      $('#scene').one('keypress', function() {
        return $('#scene').val('');
      });
      $('#notes').one('keypress', function() {
        return $('#notes').val('');
      });
      return $('#image_url').one('keypress', function() {
        return $('#image_url').val('');
      });
    };

    MapView.prototype.closeInfowindows = function() {
      if (this.userInfowindow != null) {
        this.userInfowindow.close();
      }
      if (this.placeInfowindow != null) {
        return this.placeInfowindow.close();
      }
    };

    MapView.prototype.clearMapMarker = function(marker) {
      marker.setMap(null);
      return marker = null;
    };

    MapView.prototype.initialize = function() {
      return this.userMapsMarker = null;
    };

    return MapView;

  })(Backbone.View);

}).call(this);
