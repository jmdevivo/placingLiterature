// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  PlacingLit.Views.RecentPlaces = (function(_super) {
    __extends(RecentPlaces, _super);

    function RecentPlaces() {
      return RecentPlaces.__super__.constructor.apply(this, arguments);
    }

    RecentPlaces.prototype.model = PlacingLit.Models.Location;

    RecentPlaces.prototype.el = '#recentcontent';

    RecentPlaces.prototype.max_desc_length = 100;

    RecentPlaces.prototype.initialize = function() {
      this.collection = new PlacingLit.Collections.Locations;
      this.collection.fetch({
        url: '/places/recent'
      });
      return this.listenTo(this.collection, 'all', this.render);
    };

    RecentPlaces.prototype.render = function(event) {
      if (event === 'sync') {
        return this.showNewestPlaces();
      }
    };

    RecentPlaces.prototype.showNewestPlaces = function() {
      var link, listFragment, listItems, location, locations, _i, _len;
      locations = this.collection.models;
      listFragment = document.createDocumentFragment();
      this.$el.find('li').remove();
      listItems = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = locations.length; _i < _len; _i++) {
          location = locations[_i];
          _results.push(this.getPlaceLink(location));
        }
        return _results;
      }).call(this);
      for (_i = 0, _len = listItems.length; _i < _len; _i++) {
        link = listItems[_i];
        listFragment.appendChild(link);
      }
      this.$el.append(listFragment);
      return listFragment;
    };

    RecentPlaces.prototype.getPlaceLink = function(place) {
      var li, link, location_text, title_text;
      li = document.createElement('li');
      li.id = place.get('db_key');
      link = document.createElement('a');
      link.href = '/map/' + place.get('latitude') + ',' + place.get('longitude');
      link.href += '?key=' + place.get('db_key');
      title_text = place.get('title');
      link.textContent = place.get('title');
      if (place.get('location') != null) {
        location_text = place.get('location');
        if ((location_text + title_text).length > this.max_desc_length) {
          location_text = location_text.substr(0, this.max_desc_length - title_text.length) + '...';
        }
        link.textContent += ': ' + location_text;
      }
      li.appendChild(link);
      return li;
    };

    return RecentPlaces;

  })(Backbone.View);

}).call(this);
