// Generated by CoffeeScript 1.7.1
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  PlacingLit.Views.MapCanvasView = (function(_super) {
    __extends(MapCanvasView, _super);

    function MapCanvasView() {
      this.addPlace = __bind(this.addPlace, this);
      return MapCanvasView.__super__.constructor.apply(this, arguments);
    }

    MapCanvasView.prototype.el = 'map_canvas';

    MapCanvasView.prototype.locations = null;

    MapCanvasView.prototype.userInfowindow = null;

    MapCanvasView.prototype.placeInfowindow = null;

    MapCanvasView.prototype.initialize = function() {
      if (this.collection == null) {
        this.collection = new PlacingLit.Collections.Locations;
      }
      this.listenTo(this.collection, 'all', this.render);
      this.collection.fetch();
      return this.attachSearchHandler();
    };

    MapCanvasView.prototype.render = function(event) {
      if (event === 'sync') {
        return this.mapWithMarkers();
      }
    };

    MapCanvasView.prototype.mapWithMarkers = function() {
      if (this.gmap == null) {
        this.gmap = this.googlemap('map_canvas');
      }
      this.collection.each((function(_this) {
        return function(model) {
          return _this.dropMarkerForStoredLocation(model);
        };
      })(this));
      return this.positionMap();
    };

    MapCanvasView.prototype.markerArrayFromCollection = function(collection) {
      var buildMarker, markerParams, model;
      markerParams = {
        draggable: false,
        animation: google.maps.Animation.DROP,
        icon: '/img/book.png'
      };
      buildMarker = function(model) {
        var marker, title;
        title = "" + (model.get('title')) + " by " + (model.get('author'));
        markerParams.title = "" + (model.get('title')) + " by " + (model.get('author'));
        markerParams.position = new google.maps.LatLng(model.get('latitude'), model.get('longitude'));
        return marker = new google.maps.Marker(markerParams);
      };
      return (function() {
        var _i, _len, _ref, _results;
        _ref = collection.models;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          model = _ref[_i];
          _results.push(buildMarker(model));
        }
        return _results;
      })();
    };

    MapCanvasView.prototype.positionMap = function() {
      var mapcenter, usacenter, usacenterCoords;
      if (typeof CENTER !== "undefined" && CENTER !== null) {
        mapcenter = new google.maps.LatLng(CENTER.lat, CENTER.lng);
        this.gmap.setCenter(mapcenter);
        this.gmap.setZoom(this.settings.zoomLevel.close);
      } else {
        usacenterCoords = {
          lat: 39.8282,
          lng: -98.5795
        };
        usacenter = new google.maps.LatLng(usacenterCoords.lat, usacenterCoords.lng);
        this.gmap.setCenter(usacenter);
        this.gmap.setZoom(2);
      }
      if (typeof PLACEKEY !== "undefined" && PLACEKEY !== null) {
        return this.openInfowindowForPlace(PLACEKEY, mapcenter);
      }
    };

    MapCanvasView.prototype.handleMapClick = function(event) {
      return this.setUserMapMarker(this.gmap, event.latLng);
    };

    MapCanvasView.prototype.setUserMapMarker = function(map, location) {
      if (this.userMapsMarker != null) {
        this.userMapsMarker.setMap(null);
      }
      if (this.userInfowindow != null) {
        this.userInfowindow.close();
      }
      this.userMapsMarker = this.markerFromMapLocation(map, location);
      this.userMapsMarker.setMap(map);
      return google.maps.event.addListener(this.userMapsMarker, 'click', (function(_this) {
        return function(event) {
          return _this.isUserLoggedIn();
        };
      })(this));
    };

    MapCanvasView.prototype.isUserLoggedIn = function() {
      return $.ajax({
        datatype: 'json',
        url: '/user/status',
        success: (function(_this) {
          return function(data) {
            if (data.status === 'logged in') {
              return _this.dropMarkerForNewLocation();
            } else {
              return _this.showLoginInfoWindow();
            }
          };
        })(this)
      });
    };

    MapCanvasView.prototype.showLoginInfoWindow = function() {
      var content, login_url;
      this.closeInfowindows();
      this.userInfowindow = this.infowindow();
      content = '<div id="maplogin">';
      content += '<div>You must be logged in to add content.</div>';
      login_url = document.getElementById('loginlink').href;
      content += '<a href="' + login_url + '"><button>log in</button></a></p>';
      this.userInfowindow.setContent(content);
      this.userInfowindow.setPosition(this.userMapsMarker.getPosition());
      return this.userInfowindow.open(this.gmap);
    };

    MapCanvasView.prototype.dropMarkerForNewLocation = function() {
      var location;
      location = this.userMapsMarker.getPosition();
      this.showInfowindowFormAtLocation(this.gmap, this.userMapsMarker, location);
      this.setUserPlaceFromLocation(location);
      return this.handleInfowindowButtonClick();
    };

    MapCanvasView.prototype.updateInfowindowWithMessage = function(infowindow, text) {
      var textcontainer;
      textcontainer = '<div id="thankswindow">' + text.message + '</div>';
      infowindow.setContent(textcontainer);
      return google.maps.event.addListener(infowindow, 'closeclick', (function(_this) {
        return function() {
          return _this.showUpdatedMap();
        };
      })(this));
    };

    MapCanvasView.prototype.showUpdatedMap = function() {
      var m;
      return m = new MapCanvasView;
    };

    MapCanvasView.prototype.handleInfowindowButtonClick = function() {
      var $addPlaceButton;
      $addPlaceButton = $('#addplacebutton');
      $addPlaceButton = $('#map_canvas .infowindowform').find('.btn');
      if ($addPlaceButton != null) {
        return $addPlaceButton.on('click', this.addPlace);
      }
    };

    MapCanvasView.prototype.addPlace = function() {
      var field, form_data, location, message, required_fields, response, status, _i, _len;
      message = '<span>adding... please wait...</span>';
      $('#addplacebutton').replaceWith(message);
      form_data = {
        title: $('#title').val(),
        author: $('#author').val(),
        place_name: $('#place_name').val(),
        scene: $('#scene').val(),
        notes: $('#notes').val(),
        image_url: $('#image_url').val(),
        check_in: $('#check_in').prop('checked')
      };
      form_data.latitude = this.userPlace.lat();
      form_data.longitude = this.userPlace.lng();
      console.log('form data', form_data);
      required_fields = ['author', 'notes', 'place_name', 'scene', 'title'];
      for (_i = 0, _len = required_fields.length; _i < _len; _i++) {
        field = required_fields[_i];
        if (form_data[field].length === 0) {
          response = {
            message: '<p>This feels incomplete. <br> Close this window and drop a marker to start over. <br> Fill out some of these fields so we can add your scene. <br> Thanks.</p>'
          };
          this.updateInfowindowWithMessage(this.userInfowindow, response);
          return false;
        }
      }
      location = new PlacingLit.Models.Location();
      return status = location.save(form_data, {
        error: (function(_this) {
          return function(model, xhr, options) {
            return console.log('add place error - map canvas view', model, xhr, options);
          };
        })(this),
        success: (function(_this) {
          return function(model, response, options) {
            return _this.updateInfowindowWithMessage(_this.userInfowindow, response);
          };
        })(this)
      });
    };

    MapCanvasView.prototype.geocoderSearch = function() {
      var address, geocoder;
      address = document.getElementById('gcf').value;
      if (address) {
        geocoder = new google.maps.Geocoder();
        return geocoder.geocode({
          'address': address
        }, (function(_this) {
          return function(results, status) {
            var position;
            if (status === google.maps.GeocoderStatus.OK) {
              position = results[0].geometry.location;
              _this.gmap.setCenter(position);
              return _this.gmap.setZoom(_this.settings.zoomLevel["default"]);
            } else {
              return alert("geocode was not successful: " + status);
            }
          };
        })(this));
      }
    };

    MapCanvasView.prototype.attachSearchHandler = function() {
      document.getElementById('gcf').addEventListener('keydown', (function(_this) {
        return function(event) {
          if (event.which === 13 || event.keyCode === 13) {
            event.preventDefault();
            return _this.geocoderSearch();
          }
        };
      })(this));
      return document.getElementById('search').addEventListener('click', (function(_this) {
        return function(event) {
          return _this.geocoderSearch();
        };
      })(this));
    };

    MapCanvasView.prototype.infowindowContent = function(data, updateButton) {
      var button_format, content, field_format, image_format, infotemplate;
      field_format = '<br><span class="pllabel"><%= label %></span>';
      field_format += '<br><span class="plcontent"><%= content %></span>';
      button_format = '<br><div id="checkin"><button class="btn visited" ';
      button_format += 'id="<%=place_id %>">check-in</button></div>';
      image_format = '<img src="<%= image_url %>">';
      infotemplate = _.template(field_format);
      content = '<div class="plinfowindow">';
      content += '<span class="lead">' + data.title + ' by ' + data.author + '</span>';
      if (!!data.place_name) {
        content += infotemplate({
          label: 'location',
          content: data.place_name
        });
      }
      if (!!data.scene_time) {
        content += infotemplate({
          label: 'time',
          content: data.place_time
        });
      }
      if (!!data.actors) {
        content += infotemplate({
          label: 'characters',
          content: data.actors
        });
      }
      if (!!data.symbols) {
        content += infotemplate({
          label: 'symbols',
          content: data.symbols
        });
      }
      if (!!data.description) {
        content += infotemplate({
          label: 'description',
          content: data.description
        });
      }
      if (!!data.notes) {
        content += infotemplate({
          label: 'notes',
          content: data.notes
        });
      }
      content += infotemplate({
        label: 'visits',
        content: data.visits
      });
      if (!!data.date_added) {
        content += infotemplate({
          label: 'added',
          content: data.date_added
        });
      }
      if (!!data.image_url) {
        content += _.template(image_format, {
          image_url: data.image_url
        });
      }
      if (updateButton) {
        content += _.template(button_format, {
          place_id: data.id
        });
        this.handleCheckinButtonClick();
      }
      content += '</div>';
      return content;
    };

    MapCanvasView.prototype.openInfowindowForPlace = function(place_key, position) {
      var url;
      url = '/places/info/' + place_key;
      return $.getJSON(url, (function(_this) {
        return function(data) {
          var iw;
          if (_this.placeInfowindow != null) {
            _this.placeInfowindow.close();
          }
          iw = _this.infowindow();
          iw.setPosition(position);
          iw.setContent(_this.infowindowContent(data, true));
          iw.open(_this.gmap);
          return _this.placeInfowindow = iw;
        };
      })(this));
    };

    MapCanvasView.prototype.handleCheckinButtonClick = function(event) {
      return $('#map_canvas').on('click', '.visited', (function(_this) {
        return function(event) {
          $('.visited').hide();
          _this.placeInfowindow.setContent('updating...');
          return $.getJSON('/places/visit/' + event.target.id, function(data) {
            return _this.placeInfowindow.setContent(_this.infowindowContent(data, false));
          });
        };
      })(this));
    };

    MapCanvasView.prototype.dropMarkerForStoredLocation = function(model) {
      var marker, markerParams, pos;
      pos = new google.maps.LatLng(model.get('latitude'), model.get('longitude'));
      markerParams = {
        position: pos,
        draggable: false,
        animation: null,
        icon: '/img/book.png',
        title: "" + (model.get('title')) + " by " + (model.get('author'))
      };
      marker = new google.maps.Marker(markerParams);
      marker.setMap(this.gmap);
      return google.maps.event.addListener(marker, 'click', (function(_this) {
        return function() {
          var url;
          url = '/places/info/' + model.get('db_key');
          return $.getJSON(url, function(data) {
            var iw;
            iw = _this.infowindow();
            iw.setContent(_this.infowindowContent(data, true));
            iw.open(_this.gmap, marker);
            _this.placeInfowindow = iw;
            return _this.handleCheckinButtonClick();
          });
        };
      })(this));
    };

    MapCanvasView.prototype.handleInputAttributes = function() {
      var dealWithIE9Inputs, field, fields, _i, _len, _results;
      fields = $('#iwcontainer input');
      dealWithIE9Inputs = function(el) {
        return el.setAttribute('value', el.getAttribute('placeholder'));
      };
      _results = [];
      for (_i = 0, _len = fields.length; _i < _len; _i++) {
        field = fields[_i];
        _results.push(dealWithIE9Inputs(field));
      }
      return _results;
    };

    return MapCanvasView;

  })(PlacingLit.Views.MapView);

}).call(this);
